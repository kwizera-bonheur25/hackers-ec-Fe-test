import { fireEvent, render, screen } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter, useNavigate } from 'react-router-dom';
import { describe, expect, it, vi } from 'vitest';
import TwoFactorAuth from '../../../src/pages/auth/TwoFactor';
import { store } from '../../../src/redux/store';
import AllProvider from '../../Utils/AllProvider';
import { DynamicData } from '../../../src/@types/DynamicData';

vi.mock('react-router-dom', async () => {
	const actual = await vi.importActual('react-router-dom');
	return {
		...actual,
		useNavigate: vi.fn(),
		useSearchParams: () => [new URLSearchParams('?token=test-token')],
	};
});

vi.mock('../../../src/redux/features/OTPSlice', async () => {
	const actual = await vi.importActual('../../../src/redux/features/OTPSlice');
	return {
		...actual,
		verifyOTP: vi.fn(),
	};
});
describe('TwoFactorAuth component', () => {
	it('updates OTP code input correctly', () => {
		renderComponents();

		const OtpcodeInput = screen.getByPlaceholderText(/Enter OTP/i);

		fireEvent.change(OtpcodeInput, { target: { value: '123456' } });

		expect(OtpcodeInput).toHaveValue('123456');
	});

	it('should render the TwoFactorAuth component', () => {
		renderComponents();
	});

	it('the page should contain "Two-Factor Authentication"', () => {
		renderComponents();

		expect(screen.getByText('Two-Factor Authentication')).toBeInTheDocument();
	});

	it('the page should contain "Enter 6-digit code generated by our app sent to your email"', () => {
		renderComponents();

		expect(
			screen.getByText(
				'Enter 6-digit code generated by our app sent to your email',
			),
		).toBeInTheDocument();
	});

	it('navigates to the homepage when the return button is clicked', () => {
		const mockedNavigate = vi.fn();

		(useNavigate as unknown as DynamicData).mockReturnValue(mockedNavigate);

		renderComponents();

		const returnButton = screen.getByRole('button', {
			name: /Return to site/i,
		});
		fireEvent.click(returnButton);

		expect(mockedNavigate).toHaveBeenCalledWith('/');
	});

	it('render the OTP form', () => {
		renderComponents();
		const OTPInput = screen.getByPlaceholderText('Enter OTP');

		expect(OTPInput).toBeInTheDocument();
	});

	it('should not go to seller dashboard if OTP is invalid', async () => {
		const mockedNavigate = vi.fn();
		(useNavigate as unknown as DynamicData).mockReturnValue(mockedNavigate);

		renderComponents();

		const otpInput = screen.getByPlaceholderText('Enter OTP');
		const submitButton = screen.getByText(/Verify/i);

		fireEvent.change(otpInput, { target: { value: '123' } });
		fireEvent.click(submitButton);

		// Wait for the error message to appear
		const errorMessage = await screen.findByText(
			/OTP must be a 6-digit number/i,
		);

		expect(errorMessage).toBeInTheDocument();
		expect(mockedNavigate).not.toHaveBeenCalled();
	});

	it('should go to seller dashboard if OTP is valid', async () => {
		let navigate;

		const MockComponent: React.FC = () => {
			navigate = useNavigate();
			return <TwoFactorAuth />;
		};

		render(
			<Provider store={store}>
				<BrowserRouter>
					<MockComponent />
				</BrowserRouter>
			</Provider>,
		);

		const otpInput = screen.getByPlaceholderText('Enter OTP');
		const submitButton = screen.getByText(/Verify/i);

		fireEvent.change(otpInput, { target: { value: '123456' } });
		fireEvent.click(submitButton);

		expect(navigate).toBeDefined();
		navigate!('/seller-dashboard');
	});

	it('should check for logo availability', () => {
		renderComponents();

		const logo = screen.getByRole('img', { name: /ShopTrove logo/i });

		expect(logo).toBeInTheDocument();
	});

	const renderComponents = () => {
		render(<TwoFactorAuth />, { wrapper: AllProvider });
	};
});
